generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "./generated/json-schema"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int              @id @default(autoincrement())
  username    String           @unique
  password    String
  email       String           @unique
  createdAt   DateTime         @default(now())
  favorite    FavoriteRecipe[]
  comment     Comment[]
  commentLike CommentLike[]
  Note        Note[]
}

model Recipe {
  id       Int              @id @default(autoincrement())
  name     String
  slug     String           @unique
  favorite FavoriteRecipe[]
  comment  Comment[]
  Note     Note[]
}

model FavoriteRecipe {
  id       Int    @id @default(autoincrement())
  userId   Int
  recipeId Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@unique([userId, recipeId])
}

model Note {
  id       Int    @id @default(autoincrement())
  content  String
  userId   Int
  recipeId Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  recipeId  Int

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe        @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  likes  CommentLike[]

  @@index([recipeId])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}
